f
streams.py
1	2	# -*- coding:utf -*-
1	6	Fri 27 Jan 2017 09:39:21 AM CET
1	18	    def addattr(self,x,val):
1	19	        self.__dict__[x]=val
1	22	class Flow(Stream):
1	24	    Defines all urban steam flows.
1	31	    def __init__(self, flow_name, internal=False):
1	33	        Class initiator for urban flows.
1	36	        if internal:
1	37	            self.name = "Internal Urban Flow for <{}>".format(flow_name)
1	39	            self.name = "External Urban Flow for <{}>".format(flow_name)
1	44	    Defines existing urban resources stocks.
1	48	    storage = pd.DataFrame()
1	49	    affluence = pd.DataFrame()
1	50	    technology = pd.DataFrame()
1	51	    data = pd.DataFrame()
1	54	    def __init__(self):
1	56	        Class initiator for external urban flows.
1	61	    def addFlow(self, flow_name, internal=False):
1	63	        Add a flow to the stock.
1	66	        self.addattr(flow_name, Flow(flow_name, internal=internal))
1	68	    def computeStock(self):
1	70	        Compute the material stock depending on passed `affluence`.
1	73	        for i in range(self.affluence.shape[0]):
1	74	            intensities = self.data.ix[:, i]
1	75	            # compute affluences
1	76	            m = self.affluence[i]
1	80	            idn = self.technology[i]
1	81	            if isinstance(m, str):
1	82	                affluence = self.g.__getattribute__(m)
1	84	                affluence = 1
1	85	            if isinstance(idn, str):
1	86	                indicator = self.g.__getattribute__(idn)
1	89	            output_data = intensities * affluence * indicator
1	90	            self.storage = self.storage.append(output_data)

